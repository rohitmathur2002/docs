<Connector port="443" protocol="org.apache.coyote.http11.Http11NioProtocol"
            maxThreads="200" scheme="https" secure="true"
            SSLEnabled="true"
            SSLCertificateFile="/etc/ssl/certs/fsuite.crt"
            SSLCertificateKeyFile="/etc/ssl/certs/fsuite.crt" />
			
    <Connector port="8443" protocol="org.apache.coyote.http11.Http11NioProtocol"
               maxThreads="150" SSLEnabled="true" xpoweredBy="false" server="Apache TomEE" >
        <UpgradeProtocol className="org.apache.coyote.http2.Http2Protocol" />
        <SSLHostConfig>
            <Certificate certificateKeystoreFile="conf/localhost-rsa.jks"
                         type="RSA" />
		</SSLHostConfig>
	</Connector>
	
===========================================================================================================================================

https://medium.com/@mashrur123/a-step-by-step-guide-to-securing-a-tomcat-server-with-letsencrypt-ssl-certificate-65cd26290b70
https://maouriyan.medium.com/how-to-setup-ci-cd-for-node-using-github-actions-with-ssh-keys-deployed-on-ubuntu-server-a74176eeb427

=========================================================================================================================================
name: CI/CD Pipeline
on:
  push:
    branches:
      - mastder

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install dependencies
        run: npm ci

      - name: Build the app
        run: npm run build

      - name: Deploy to EC2 instance
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "build/"
          target: "/var/www/"
		  
		  
=====================================================================================================================================================

Two type of domain in route 53
Generic : - .com .org .net
Geographic : - .in .ca .us
remembered name server is authorative server
BRFF-ZQQT

==================================================================================================================================================
================================================================================================================================================
    <Connector port="443" protocol="org.apache.coyote.http11.Http11NioProtocol"
           maxThreads="150" SSLEnabled="true" scheme="https" secure="true" >
    <UpgradeProtocol className="org.apache.coyote.http2.Http2Protocol" />
    <SSLHostConfig>
        <Certificate certificateKeyFile="conf/fsuite.pem"
                     certificateFile="conf/fsuite.crt"
                     certificateChainFile="conf/fsuiteca.cer"
                     type="RSA" />
    </SSLHostConfig>
 </Connector>
 GRANT ALL PRIVILEGES ON cscartdb.* TO 'cscart'@'localhost' IDENTIFIED BY '$^ryicHb}!M9' WITH GRANT OPTION;

CREATE DATABASE cscartdb;
GRANT ALL PRIVILEGES ON cscartdb.* TO 'cscart'@'localhost' IDENTIFIED BY '$^ryicHb}!M9';
FLUSH PRIVILEGES;
exit;

CREATE USER 'cscart'@'localhost' IDENTIFIED BY '$^ryicHb}!M9';
GRANT PRIVILEGE ON cscartdb TO 'cscart'@'localhost';
GRANT ALL ON cscartdb.* TO 'cscart';
CREATE DATABASE test_db;
CREATE USER 'admin' IDENTIFIED BY '$^ryicHb}!M9';
GRANT ALL ON webdata.* TO 'admin';
ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password by 'mpG3UWVK9R';

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

      - name: Deploy
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./www/"
          target: "/var/www/"

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: d
          port: ${{ secrets.PORT }}
          script: |
                   mysql -u${{ secrets.DBUSER }} -p${{ secrets.PASSWORD }} test_db < /var/www/www/test_db.sql
				   
mysql -h rds -u admin -p db_1
16495.2 per month elastic drs
snapshot:
6328.8 per month instance
1464.19 per month volume
https://aws.amazon.com/blogs/storage/private-cross-region-disaster-recovery-with-aws-elastic-disaster-recovery/




# Setup configuration values
SENTRY_AUTH_TOKEN=8ab2d7b992aa423cb3a754818a03a7eab8267d9684244895b42e1173c81f56d7
SENTRY_ORG=esteplogicit
SENTRY_PROJECT=javascript-react
VERSION=`sentry-cli releases propose-version`
	sentry-cli releases set-commits "2.0" --org=esteplogicit --project=javascript-react --auth-token=370c19658ea14e45af1b22eb8d3ad8965407e6b02446413aafaef11a12318ef3
    sentry-cli releases set-commits "$VERSION" --auto --org=dark-horse --project=javascript-1 --auth-token=<YOUR-INTEGRATION-ID-HERE>



SENTRY_AUTH_TOKEN=11c4185d39454ff299f314a751d91a767b1570a04fe04e179dcc76110aac82ec
SENTRY_ORG=esteplogicit
SENTRY_PROJECT=javascript-react
VERSION=1.0.0
sentry-cli releases finalize "1.0.0" --org=esteplogicit --project=javascript-react --auth-token=11c4185d39454ff299f314a751d91a767b1570a04fe04e179dcc76110aac82ec
			

    - name: Push APK to Releases
      uses: ncipollo/release-action@v1
      with:
        artifacts: "build/app/outputs/apk/release/*.apk"
        token: ${{ secrets.TOKEN }}
    - name: Push APK to Releases
      uses: ncipollo/release-action@v1
      with:
        artifacts: "    - name: Push APK to Releases
      uses: ncipollo/release-action@v1
      with:
        artifacts: "build/app/outputs/apk/*.apk"
        token: ${{ secrets.TOKEN }}    - name: Push APK to Releases
    
		flutter build apk --target-platform android-arm,android-arm64 --split-per-abi
		        flutter build appbundle --target-platform android-arm,android-arm64
build/app/outputs/apk/release/
build/app/outputs/bundle/release/



version: 0.2
phases:
  install:
    runtime-versions:
      android: 29
      java: openjdk8
    commands:
      - pwd
  pre_build:
    commands:
      - echo Pre Build started on `date`
      - git clone https://github.com/flutter/flutter.git -b stable
      - export PATH="$PATH:`pwd`/flutter/bin"
      - flutter precache
      - flutter precache
      - flutter doctor
build:
    commands:
      - echo Build started on `date`
      - flutter build apk --no-shrink
      - ls -al
  post_build:
    commands:
      - echo Build completed on `date`
artifacts:
  files:
    - build/app/outputs/apk/release/*.apk
  discard-paths: yes
  
  
https://medium.com/@seshasai_30381/flutter-github-actions-a-ci-cd-pipeline-for-flutter-apps-with-github-actions-fastlane-and-7ca9a6b2a1cc




https://medium.com/@prashantsde/deploy-java-application-with-complete-ci-cd-pipeline-jenkins-21d210279794



Please have a look for below videos on Uscreen platform and share 'Description':


igE+PS{qzoLy-5s

nginx Load Balancing

nginx.conf

upstream my-app {
    server 172.17.0.1:8081 weight=1;
    server 172.17.0.1:8082 weight=1;
}

server {
    location / {
        proxy_pass http://my-app;
    }
}

Dockerfile

FROM nginx
RUN rm /etc/nginx/conf.d/default.conf
COPY nginx.conf /etc/nginx/conf.d/default.conf

FROM nginx:alpine
COPY ./nginx.conf /etc/nginx/nginx.conf
EXPOSE 80
CMD ["nginx", "-g", "daemon-off;"]

upstream app {
    server flask:80 weight=1;
    server nodejs:80 weight=1;
}

server {
    listen 80;
    location / {
        proxy_pass http://all;
    }
}
